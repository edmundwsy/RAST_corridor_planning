// Generated by gencpp from file decomp_ros_msgs/DynPolyhedronArray.msg
// DO NOT EDIT!


#ifndef DECOMP_ROS_MSGS_MESSAGE_DYNPOLYHEDRONARRAY_H
#define DECOMP_ROS_MSGS_MESSAGE_DYNPOLYHEDRONARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <decomp_ros_msgs/DynPolyhedron.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace decomp_ros_msgs
{
template <class ContainerAllocator>
struct DynPolyhedronArray_
{
  typedef DynPolyhedronArray_<ContainerAllocator> Type;

  DynPolyhedronArray_()
    : header()
    , dyn_polyhedrons()
    , start_pos()
    , end_pos()
    , start_vel()
    , end_vel()
    , start_acc()
    , end_acc()  {
    }
  DynPolyhedronArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dyn_polyhedrons(_alloc)
    , start_pos(_alloc)
    , end_pos(_alloc)
    , start_vel(_alloc)
    , end_vel(_alloc)
    , start_acc(_alloc)
    , end_acc(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::decomp_ros_msgs::DynPolyhedron_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::decomp_ros_msgs::DynPolyhedron_<ContainerAllocator> >::other >  _dyn_polyhedrons_type;
  _dyn_polyhedrons_type dyn_polyhedrons;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_pos_type;
  _start_pos_type start_pos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_pos_type;
  _end_pos_type end_pos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_vel_type;
  _start_vel_type start_vel;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_vel_type;
  _end_vel_type end_vel;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_acc_type;
  _start_acc_type start_acc;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_acc_type;
  _end_acc_type end_acc;





  typedef boost::shared_ptr< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> const> ConstPtr;

}; // struct DynPolyhedronArray_

typedef ::decomp_ros_msgs::DynPolyhedronArray_<std::allocator<void> > DynPolyhedronArray;

typedef boost::shared_ptr< ::decomp_ros_msgs::DynPolyhedronArray > DynPolyhedronArrayPtr;
typedef boost::shared_ptr< ::decomp_ros_msgs::DynPolyhedronArray const> DynPolyhedronArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator1> & lhs, const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.dyn_polyhedrons == rhs.dyn_polyhedrons &&
    lhs.start_pos == rhs.start_pos &&
    lhs.end_pos == rhs.end_pos &&
    lhs.start_vel == rhs.start_vel &&
    lhs.end_vel == rhs.end_vel &&
    lhs.start_acc == rhs.start_acc &&
    lhs.end_acc == rhs.end_acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator1> & lhs, const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace decomp_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd6f0f3408419dbc193bb2231230bf52";
  }

  static const char* value(const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd6f0f3408419dbcULL;
  static const uint64_t static_value2 = 0x193bb2231230bf52ULL;
};

template<class ContainerAllocator>
struct DataType< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decomp_ros_msgs/DynPolyhedronArray";
  }

  static const char* value(const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"DynPolyhedron[] dyn_polyhedrons\n"
"geometry_msgs/Point start_pos   # start position\n"
"geometry_msgs/Point end_pos     # end position\n"
"geometry_msgs/Point start_vel # start velocity\n"
"geometry_msgs/Point end_vel   # end velocity\n"
"geometry_msgs/Point start_acc # start acceleration\n"
"geometry_msgs/Point end_acc   # end acceleration\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: decomp_ros_msgs/DynPolyhedron\n"
"float64 duration\n"
"geometry_msgs/Point[] points\n"
"geometry_msgs/Point[] normals #norm is an outer vector\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dyn_polyhedrons);
      stream.next(m.start_pos);
      stream.next(m.end_pos);
      stream.next(m.start_vel);
      stream.next(m.end_vel);
      stream.next(m.start_acc);
      stream.next(m.end_acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynPolyhedronArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decomp_ros_msgs::DynPolyhedronArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dyn_polyhedrons[]" << std::endl;
    for (size_t i = 0; i < v.dyn_polyhedrons.size(); ++i)
    {
      s << indent << "  dyn_polyhedrons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::decomp_ros_msgs::DynPolyhedron_<ContainerAllocator> >::stream(s, indent + "    ", v.dyn_polyhedrons[i]);
    }
    s << indent << "start_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_pos);
    s << indent << "end_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end_pos);
    s << indent << "start_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_vel);
    s << indent << "end_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end_vel);
    s << indent << "start_acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_acc);
    s << indent << "end_acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end_acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECOMP_ROS_MSGS_MESSAGE_DYNPOLYHEDRONARRAY_H
